// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview This file defines a Genkit flow that suggests a relevant photo based on a user-provided quote.
 *
 * @fileOverview A photo suggestion AI agent.
 *  suggestPhotoForQuote - A function that suggests a relevant photo for a quote.
 *  SuggestPhotoForQuoteInput - The input type for the suggestPhotoForQuote function.
 *  SuggestPhotoForQuoteOutput - The return type for the suggestPhotoForQuote function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestPhotoForQuoteInputSchema = z.object({
  quote: z.string().describe('The quote provided by the user.'),
});
export type SuggestPhotoForQuoteInput = z.infer<typeof SuggestPhotoForQuoteInputSchema>;

const SuggestPhotoForQuoteOutputSchema = z.object({
  photoSuggestion: z
    .string()
    .describe(
      'A photo suggestion, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // keep on one line, no newlines
    ),
});
export type SuggestPhotoForQuoteOutput = z.infer<typeof SuggestPhotoForQuoteOutputSchema>;

export async function suggestPhotoForQuote(input: SuggestPhotoForQuoteInput): Promise<SuggestPhotoForQuoteOutput> {
  return suggestPhotoForQuoteFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestPhotoForQuotePrompt',
  input: {schema: SuggestPhotoForQuoteInputSchema},
  output: {schema: SuggestPhotoForQuoteOutputSchema},
  prompt: `You are an AI assistant that suggests a photo to accompany a quote.

  Based on the following quote, suggest a photo.  The suggestion MUST be returned as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.

  Quote: {{{quote}}}

  If the quote is about love, suggest a photo of people in love.  If the quote is about nature, suggest a photo of nature.  If the quote is about sadness, suggest a sad photo.
  Do not actually GENERATE the image, only return a PROMPT to be used with a separate image generation service like googleai/gemini-2.0-flash-preview-image-generation.
`,
});

const suggestPhotoForQuoteFlow = ai.defineFlow(
  {
    name: 'suggestPhotoForQuoteFlow',
    inputSchema: SuggestPhotoForQuoteInputSchema,
    outputSchema: SuggestPhotoForQuoteOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
